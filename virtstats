#!/usr/bin/perl -l

use strict;
use Munin::Plugin;
use Sys::Virt;
use XML::Simple;

sub genlabel
{
    local $_ = shift;
    s/^[^a-zA-Z_]/_/;
    s/[^a-zA-Z0-9_]/_/g;
    $_;
}

sub fetch
{
    my $target = shift;
    my $vhost  = shift;
    my $name   = shift;
    my $entry  = shift;
    my $filter = shift;

    my $path = qq{/cgroup/${target}/libvirt/${vhost}/${name}/${entry}};
    my $value= `cat $path`;

    if($filter && ref $filter eq 'CODE') {
        $value = $filter->($value);
    }

    chomp $value;
    return $value;
}

sub init
{
    my %domains = ();
    my $vmm = Sys::Virt->new('uri' => $_);
    my $xs  = XML::Simple->new;

    foreach my $dom ($vmm->list_domains) {
        my $name = $dom->get_name;
        my $label= genlabel($name);

        $domains{$label}{'name'} = $name;
        $domains{$label}{'desc'} = $xs->XMLin($dom->get_xml_description);

        $domains{$label}{'values'}{'cpuacct'} =
            fetch("cpuacct", "qemu", $name, "cpuacct.stat", sub{
                    my $total = 0;
                    foreach my $line (split /\n/,shift) {
                        $total += (split / /,$line)[1];
                    }
                    return  $total;
            });

        $domains{$label}{'values'}{'memory'} =
            fetch("memory", "qemu", $name, "memory.memsw.usage_in_bytes");

        $domains{$label}{'values'}{'blkio'} =
            fetch("blkio", "qemu", $name, "blkio.io_service_bytes", sub {
                    foreach my $line (split /\n/,shift) {
                        if($line =~ /^Total/) {
                            return (split / /,$line)[1];
                        }
                    }
            });

        $domains{$label}{'values'}{'network'} = 0;
        my $interfaces = $domains{$label}{'desc'}{'devices'}{'interface'};
        foreach my $interface (ref $interfaces eq 'ARRAY' ? @{$interfaces} : ($interfaces))
        {
            next unless($interface->{'type'} eq 'bridge');
            my $stats = $dom->interface_stats($interface->{'target'}{'dev'});
            $domains{$label}{'values'}{'network'} += $stats->{'tx_bytes'};
            $domains{$label}{'values'}{'network'} += $stats->{'rx_bytes'};
        }
    }

    return %domains;
}

sub sort_domain
{
    my $domains = shift;
    my $key     = shift;

    return sort {$domains->{$b}{'values'}{$key} <=> $domains->{$a}{'values'}{$key}}
           keys %{$domains};
}

###############################################################################

my %domains = init;

if(@ARGV >= 1) {
    if($ARGV[0] eq 'autoconf') {
        print "no";
    }
    if($ARGV[0] eq 'config') {
        # config 'vmnum'
        print 'multigraph virtstats_vmnum';
        print 'graph_title Number of VirtualMachine';
        print 'graph_vlabel vms';
        print 'graph_args -l 0';
        print 'graph_category virt';
        print 'vmnum.label vm';
        print 'vmnum.type GAUGE';
        print;

        # config 'cpuacct'
        print 'multigraph virtstats_cpuacct';
        print 'graph_title CPU Usage';
        print 'graph_vlabel %';
        print 'graph_args -l 0';
        print 'graph_category virt';
        {
            my @domain_order = sort_domain(\%domains, 'cpuacct');
            print 'graph_order ', join " ", @domain_order;
            foreach my $dom (@domain_order) {
                print $dom,'.label ',$domains{$dom}{'name'};
                print $dom,'.type DERIVE';
                if($dom eq $domain_order[0]) {
                    print $dom,'.draw AREA';
                }else {
                    print $dom,'.draw STACK';
                }
            }
        }
        print;

        # config 'memory'
        print 'multigraph virtstats_memory';
        print 'graph_title Memory Usage';
        print 'graph_vlabel Bytes';
        print 'graph_args --base 1024 -l 0';
        print 'graph_category virt';
        {
            my @domain_order = sort_domain(\%domains, 'memory');
            print 'graph_order ', join " ", @domain_order;
            foreach my $dom (@domain_order) {
                print $dom,'.label ',$domains{$dom}{'name'};
                print $dom,'.type GAUGE';
                if($dom eq $domain_order[0]) {
                    print $dom,'.draw AREA';
                }else {
                    print $dom,'.draw STACK';
                }
            }
        }
        print;

        # config 'blkio'
        print 'multigraph virtstats_blkio';
        print 'graph_title Disk IO';
        print 'graph_vlabel Bytes';
        print 'graph_args --base 1024 -l 0';
        print 'graph_category virt';
        {
            my @domain_order = sort_domain(\%domains, 'blkio');
            print 'graph_order ', join " ", @domain_order;
            foreach my $dom (@domain_order) {
                print $dom,'.label ',$domains{$dom}{'name'};
                print $dom,'.type DERIVE';
            }
        }
        print;

        # config 'network'
        print 'multigraph virtstats_network';
        print 'graph_title Network Traffic';
        print 'graph_vlabel bps';
        print 'graph_args --base 1024 -l 0';
        print 'graph_category virt';
        {
            my @domain_order = sort_domain(\%domains, 'network');
            print 'graph_order ', join " ", @domain_order;
            foreach my $dom (@domain_order) {
                print $dom,'.label ',$domains{$dom}{'name'};
                print $dom,'.type DERIVE';
                print $dom,".cdef ${dom},8,*";
            }
        }
        print;
    }
    exit;
}

print 'multigraph virtstats_vmnum';
print 'vmnum.value ', scalar keys %domains;
print;

foreach my $graph (('cpuacct', 'memory', 'blkio', 'network')) {
    print "multigraph virtstats_${graph}";
    foreach my $dom (keys %domains) {
        print $dom,'.value ', $domains{$dom}{'values'}{$graph};
    }
    print;
}
